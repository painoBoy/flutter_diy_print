import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get app_account_Management => "Printer Management";
  String get app_account_favorite => "My Collection";
  String get app_account_help => "Help & Feedback";
  String get app_account_message => "Message";
  String get app_account_phoneNum => "Phone Num";
  String get app_account_printHistory => "Print History";
  String get app_account_setting => "Setting";
  String get app_home_PrintState => "Printer status";
  String get app_home_title => "WorkSpace";
  String get app_login_Login => "Log in";
  String get app_login_account => "Please Enter your Account";
  String get app_login_forgotPwd => "Forgot password";
  String get app_login_others => "Or";
  String get app_login_pwd => "Please Enter your Password";
  String get app_login_signUp => "Sign up";
  String get app_navigationBar_account => "Account";
  String get app_navigationBar_modelLib => "Model Lib";
  String get app_navigationBar_workspace => "Workspace";
  String get app_printerMan_name => "Name";
  String get app_printerMan_status => "Printer Status";
  String get app_printerMan_title => "Manage Printer";
  String get app_register_backLogin => "have an account";
  String get app_register_cea => "Create Email Account";
  String get app_register_email => "Please enter your Email";
  String get app_register_notice => "after get again";
  String get app_register_phone => "Please enter your PhoneNum";
  String get app_register_phoneSignUp => "Create Phone Account";
  String get app_register_pwd => "Please Enter your password";
  String get app_register_signUpBtn => "Sign Up";
  String get app_register_svCode => "Get VCode";
  String get app_register_vCode => "Verification Code";
  String get app_setting_General => "General";
  String get app_setting_SignOut => "Sign Out";
  String get app_setting_SignOutCancel => "Cancel";
  String get app_setting_SignOutNotice => "Are you sure want to log out";
  String get app_setting_SignOutOK => "OK";
  String get app_setting_about => "About";
  String get app_setting_account => "Account";
  String get app_setting_cache => "Clear Cache";
  String get app_setting_notice => "Notification";
  String get app_setting_title => "Setting";
  String get app_title => "Lotmaxx Diy 3D";
  String get app_userInfo_title => "UserInfo";
}

class $en extends S {
  const $en();
}

class $zh extends S {
  const $zh();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get app_setting_SignOutOK => "确定";
  @override
  String get app_userInfo_title => "个人信息";
  @override
  String get app_printerMan_status => "打印机状态";
  @override
  String get app_account_help => "帮助与反馈";
  @override
  String get app_login_others => "其他";
  @override
  String get app_register_notice => "后重新获取";
  @override
  String get app_login_forgotPwd => "忘记密码";
  @override
  String get app_register_signUpBtn => "注 册";
  @override
  String get app_setting_SignOut => "退 出";
  @override
  String get app_home_title => "工作台";
  @override
  String get app_login_account => "请输入您的账号";
  @override
  String get app_setting_General => "基础设置";
  @override
  String get app_setting_SignOutNotice => "确定要退出吗";
  @override
  String get app_register_email => "请输入您的注册邮箱";
  @override
  String get app_account_setting => "设置";
  @override
  String get app_register_phone => "手机号码";
  @override
  String get app_account_message => "消息中心";
  @override
  String get app_register_pwd => "请输入密码";
  @override
  String get app_login_Login => "登 录";
  @override
  String get app_register_svCode => "发送验证码";
  @override
  String get app_navigationBar_workspace => "工作台";
  @override
  String get app_printerMan_title => "设备管理";
  @override
  String get app_navigationBar_modelLib => "模型库";
  @override
  String get app_account_Management => "设备管理";
  @override
  String get app_setting_notice => "消息通知";
  @override
  String get app_title => "Lotmaxx Diy 3D";
  @override
  String get app_login_signUp => "注册";
  @override
  String get app_register_cea => "邮箱注册";
  @override
  String get app_account_printHistory => "打印记录";
  @override
  String get app_navigationBar_account => "我的";
  @override
  String get app_account_phoneNum => "手机号码";
  @override
  String get app_setting_about => "关于";
  @override
  String get app_setting_account => "账号";
  @override
  String get app_register_vCode => "验证码";
  @override
  String get app_setting_title => "设置";
  @override
  String get app_setting_cache => "清理缓存";
  @override
  String get app_register_phoneSignUp => "手机注册";
  @override
  String get app_register_backLogin => "已有账号返回登录";
  @override
  String get app_printerMan_name => "名称";
  @override
  String get app_account_favorite => "我的收藏";
  @override
  String get app_login_pwd => "请输入您的密码";
  @override
  String get app_setting_SignOutCancel => "取消";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "zh":
          S.current = const $zh();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
